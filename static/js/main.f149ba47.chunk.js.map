{"version":3,"sources":["components/form/form.js","components/footer/footer.js","components/header/header.js","components/results/results.js","App.js","serviceWorker.js","index.js"],"names":["method","Form","props","handelInput","event","url","target","value","console","log","setState","handleMethod","e","handelBody","body","handleClick","savedToLocalStorage","state","options","headers","JSON","stringify","handelUpdate","savedRequest","push","localStorage","setItem","parse","getItem","id","type","placeholder","onChange","this","onClick","name","defaultChecked","htmlFor","React","Component","Footer","Header","Results","className","count","results","App","a","fetch","raw","json","data","forEach","key","Fragment","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f149ba47.chunk.js","sourcesContent":["import React from 'react';\nimport './form.scss'\nimport History from '../history/history'\nvar method = 'get'\nclass Form extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { \n          url: '',\n        method:'',\n        savedRequest: JSON.parse(localStorage.getItem('history')) || [],\n        body: null, \n      };\n    }\n    handelInput = (event) => {\n      // store url state.url\n      let url = event.target.value;\n      console.log('event.target.value > url',event.target.value);\n      this.setState({ url }); //rerender\n    }\n    handleMethod = (e)=>{\n      //store method state.method\n       method = e.target.value;\n      console.log('method from select',method,e.target.value);\n      this.setState({ method });\n    }\n    handelBody = (e)=>{\n      let body = e.target.body;\n      this.setState({body});\n    }\n    // go button \n    handleClick = () =>{\n      // first save data to local storage \n      this.savedToLocalStorage();\n      //get url\n      let url = this.state.url\n      let options = {\n        method: this.state.method,\n        headers: { 'Content-Type': 'application/json'},\n        // if method is get or delete then no need for the body else i will get it \n        body: this.state.method === 'get' || this.state.method === 'delete'\n          ? null : JSON.stringify(this.state.body),\n      };\n\n\n      // send url and options from child (form) to parent (app)\n      this.props.handelUpdate(url,options);\n      // this.setState({ url: '' });\n    }\n\n    // create method to save method and url to local storage \n    savedToLocalStorage = ()=>{\n      //store both method and url in array of objects\n      this.state.savedRequest.push({method:this.state.method,url:this.state.url});\n      // save array to local storage \n      localStorage.setItem('history',JSON.stringify(this.state.savedRequest))\n    }\n\n\n\n    render() {\n        return (\n            <main>\n                <div id=\"inputDiv\" >\n                    <p>URL: </p>\n                    <input type=\"text\" placeholder='https://localhost:3000/categories' onChange={this.handelInput} />\n                    <button onClick={this.handleClick}>Go!</button>\n                </div>\n                <form onClick={this.handleMethod} id='form'>\n                    <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" defaultChecked />\n                    <label htmlFor=\"get\">GET</label>\n                    <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" />\n                    <label htmlFor=\"post\">POST</label>\n                    <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\" />\n                    <label htmlFor=\"put\">PUT</label>\n                    <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" />\n                    <label htmlFor=\"delete\">DELETE</label>\n                </form>\n                <textarea onChange={this.handelBody}></textarea>\n                {/* send the saved request array and the body to the history  */}\n                <History savedRequest={this.state.savedRequest} body={this.state.body}/>\n            </main>\n        );\n    }\n}\n\nexport default Form;","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => <footer>&copy 2020</footer>\n\nexport default Footer;","import React from 'react';\nimport'./header.scss';\n\nconst Header = () => {\n    return (\n      <header>\n        <h1> RESTy</h1>\n      </header>\n    )\n  };\n\nexport default Header;","import React from 'react';\nfunction Results(props) {\n  return (\n    <pre className=\"results\">\n      {JSON.stringify( {headers: props.headers, count: props.count,  results: props.results }, null,5  )}\n    </pre>\n  );\n}\nexport default Results;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Form from './components/form/form';\nimport Footer from './components/footer/footer';\nimport Header from './components/header/header.js';\nimport Results from './components/results/results.js';\nimport History from './components/history/history';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      count:0,\n      results: [],\n      headers: [],\n      // results: null,\n      // headers:'',\n    };\n  }\n  // url.......  https://swapi.dev/api/people/\n\n  // came from child form with parameters url and option \n  handelUpdate = async (url,options)=> {\n    // console.log('url from app.js ', url);\n    let raw = await fetch(url,options);\n    console.log(\"this is raaaw\".raw)\n    let data = await raw.json();\n    console.log(\"this is data after fetch\",data)\n    console.log(\"this is raaaw.headeeers\",raw.headers)\n    let headers={};\n    raw.headers.forEach( (value, key) => {\n      headers[key] = value;\n\n    });\n    \n    this.setState({headers: headers, results: data.results, count: data.count });\n  };\n\n \n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Form handelUpdate={this.handelUpdate}/>\n        <Results headers={this.state.headers} count={this.state.count} results={this.state.results} />\n        {/* // i can use anything inside handleupdate in the history child by the props */}\n        <History fetchData={this.handelUpdate}/> \n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n//github","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}