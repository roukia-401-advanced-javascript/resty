{"version":3,"sources":["components/form/form.js","components/footer/footer.js","components/header/header.js","components/if/if.js","components/results/results.js","components/help/help.js","components/history/history.js","App.js","serviceWorker.js","index.js"],"names":["method","Form","props","handelInput","event","url","target","value","setState","handleMethod","e","handelBody","body","handleClick","a","preventDefault","toggle","savedToLocalStorage","state","options","headers","JSON","stringify","fetchData","handelSavedRequests","savedRequests","push","console","log","localStorage","setItem","parse","getItem","id","type","placeholder","onChange","this","onClick","name","defaultChecked","htmlFor","React","Component","Footer","Header","className","data-testid","to","render","condition","children","If","Children","map","child","cloneElement","Then","Else","Results","loading","src","theme","href","rel","Help","History","i","item","key","bind","App","toggleLoading","handelUpdate","count","results","fetch","raw","json","data","forEach","val","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1ef77ec.chunk.js","sourcesContent":["import React from 'react';\nimport './form.scss';\n\nvar method = 'get'\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: '',\n      method: '',\n      savedRequests: JSON.parse(localStorage.getItem('history')) || [],\n      body: null,\n    };\n  }\n  handelInput = (event) => {\n    // store url state.url //rerender\n    let url = event.target.value;\n    this.setState({ url }); //means url:url\n  }\n  handleMethod = (e) => {\n    //store method state.method //rerender\n    method = e.target.value;\n    this.setState({ method }); //means method:method\n  }\n  handelBody = (e) => {\n    //store body state.body //rerender\n    let body = e.target.value;\n    this.setState({ body }); //means body:body\n  }\n  // go button \n  handleClick =async (e) => {\n    e.preventDefault();\n    // add the loading feature to be displayed before the results display \n    this.props.toggle(); //>> true\n    // save data to local storage \n    this.savedToLocalStorage();\n    //get url, method, body >> go to get the data of this url \n    let url = this.state.url\n    let options = {\n      method: this.state.method,\n      headers: { 'Content-Type': 'application/json' },\n      // if method is get or delete then no need for the body else i will get it \n      body: this.state.method === 'get' || this.state.method === 'delete'\n        ? null : JSON.stringify(this.state.body),\n    };\n    // get the data of this url by fetch (pass url and options to the parent app.js and fire the function there)\n    this.props.fetchData(url, options);\n    // pass to app.js the savedRequests array\n    this.props.handelSavedRequests(this.state.savedRequests);\n  }\n  // create method to save method and url to local storage \n  savedToLocalStorage = () => {\n    //store both method and url in array of objects\n    this.state.savedRequests.push({ method: this.state.method, url: this.state.url });\n    console.log('this is the savedReauest array og objects :',this.state.savedRequests)\n    // save array to local storage \n    localStorage.setItem('history', JSON.stringify(this.state.savedRequests))\n    console.log('this is the savedReauest array og objects after saving to local storage :',this.state.savedRequests)\n\n  }\n  render() {\n    // what to render in the form ?\n    // fisrt input url , choses method, input text for body , submit the form \n    return (\n      <main>\n        <div id=\"inputDiv\" >\n          <p>URL: </p>\n          <input type=\"text\" placeholder='https://localhost:3000/categories' onChange={this.handelInput} />\n          <button onClick={this.handleClick}>Go!</button> \n        </div>\n        <form onClick={this.handleMethod} id='form'>\n          <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" defaultChecked />\n          <label htmlFor=\"get\">GET</label>\n          <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" />\n          <label htmlFor=\"post\">POST</label>\n          <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\" />\n          <label htmlFor=\"put\">PUT</label>\n          <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" />\n          <label htmlFor=\"delete\">DELETE</label>\n        </form>\n        <section id = \"textareaSection\">\n        <textarea placeholder=\"Enter the body in Json format...\" onChange={this.handelBody}></textarea>\n        </section>\n      </main>\n    );\n  }\n\n}\n\nexport default Form;\n\n\n","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => <footer>&copy 2020</footer>\n\nexport default Footer;","import React from 'react';\nimport'./header.scss';\nimport {Link,NavLink} from 'react-router-dom';\n\nconst Header = () => {\n    return (\n      <header>\n        <h1> RESTy</h1>\n        <nav className='nav'>\n        <ul className = \"ulHeader\">\n        <li>\n            <Link data-testid=\"home\" to=\"/\">Home</Link>\n          </li>\n            <li>\n              <NavLink data-testid=\"history\" to=\"/history\" >History</NavLink>\n            </li>\n            <li>\n              <NavLink   data-testid=\"help\"to=\"/help\" >Help</NavLink>\n            </li>\n        </ul>\n      </nav>\n      </header>\n    )\n  };\n\nexport default Header;","\nimport React from 'react';\n\nconst render = (condition = false , children = null) => {\n    return condition ? children : null;\n}\n\n\nexport const If = props => {\n    return (\n        React.Children.map(props.children, child => React.cloneElement(child, {\n                name: 'sample', condition: props.condition\n            })\n        )\n    )\n}\n\nexport const Then = props=> render(props.condition, props.children);\nexport const Else = props=> render(!props.condition, props.children);\n\n","import React from 'react';\nimport './results.scss';\nimport { If, Then, Else } from '../if/if.js';\nimport ReactJson from 'react-json-view';\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n  }\n\n  render() {\n    return (\n      <section>\n      {/* // my loading now is true go to else and show the theme then continue and back to the code after handleupdate */}\n        <If condition={!this.props.loading}> \n          <Then>\n            {/* // display the results */}\n            <div data-testid=\"results\">\n            <ReactJson src={this.props} theme=\"monokai\" />\n            </div>\n\n          </Then>\n          <Else>\n            {/* display the theme */}\n\n            <div className=\"about\">\n              <a className=\"bg_links social portfolio\" href=\"https://www.rafaelalucas.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <span className=\"icon\"></span>\n              </a>\n              <a className=\"bg_links social dribbble\" href=\"https://dribbble.com/rafaelalucas\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <span className=\"icon\"></span>\n              </a>\n              <a className=\"bg_links social linkedin\" href=\"https://www.linkedin.com/in/rafaelalucas/\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <span className=\"icon\"></span>\n              </a>\n            </div>\n\n            <div className=\"content\">\n              <div className=\"loading\">\n                <p>loading</p>\n                <span></span>\n              </div>\n            </div>\n          </Else>\n        </If>\n      </section>\n    )\n  }\n}\n\nexport default Results;\n\n\n","import React from 'react';\nimport './help.scss';\nfunction Help() {\n\n  return (\n    <>\n      <h2 id = \"h2Help\">Welcome To Help Page </h2>\n      <h3 id = \"h3Help\">Here are the steps to run the Resty application:</h3>\n\n      <ol className=\"d\">\n        <li className = \"helpList\">Enter url</li>\n        <li  className = \"helpList\"> choose the method</li>\n        <li  className = \"helpList\">Enter the body if required</li>\n        <li  className = \"helpList\">Press Go button</li>\n        <li  className = \"helpList\">View the Results</li>\n        <li  className = \"helpList\">View all your history urls: Go to the history page and press the method button to view its results again </li>\n      </ol>\n\n    </>\n  );\n}\n\nexport default Help;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './history.scss';\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      savedRequests: [],\n    };\n  }\n  handleClick(i) {\n    this.props.toggle();\n    console.log('savedRequests', this.props.savedRequests);\n    console.log('savedRequests[i]', this.props.savedRequests[i]);\n    let url = this.props.savedRequests[i].url;\n    let options = {\n      method: this.props.savedRequests[i].method,\n      headers: { 'Content-Type': 'application/json' },\n      body: this.props.savedRequests[i].method === 'get' || this.props.savedRequests[i].method === 'delete'\n        ? null : JSON.stringify(this.props.body),\n    };\n    this.props.fetchData(url, options);\n  }\n  render() {\n    // i want to render the method and url with click button to redirected to the home page with results \n    return(\n      <section id=\"historySection\">\n        <h1 id=\"urlHistoryHeader\">URL History</h1>\n        {this.props.savedRequests.map((item, i) => (\n          <li key={i}>\n            <Link to='/' > \n            <button id=\"historyMethodButton\" onClick={this.handleClick.bind(this, i)}>{item.method}\n            </button> \n            </Link>\n            <p id=\"historyUrl\">{item.url}</p> \n            <br />\n          </li>\n        ))}\n      </section>\n    )\n  }\n}\nexport default History;\n\n\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Form from './components/form/form';\nimport Footer from './components/footer/footer';\nimport Header from './components/header/header.js';\nimport Results from './components/results/results.js';\nimport Help from './components/help/help.js';\nimport History from './components/history/history.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      results: null, //data results\n      headers: null,\n      loading: false,\n      savedRequests:[]\n\n    };\n  }\n\n  toggleLoading = () => {\n    this.setState({ loading: !this.state.loading });\n    console.log('loading in toggleLoading app.js....', this.state.loading)\n  }\n  // url.......  https://swapi.dev/api/people/\n  // ..... https://gazahopes.herokuapp.com/api/v1/posts/\n\n  \n  handelUpdate = (count, results, headers) => {\n    this.setState({ count, results, headers }); //rerender\n\n  };\n    // passed from component form with parameters url and option \n    // passed from component results with parametrs url and options\n  fetchData = async (url, options) => {\n    let raw = await fetch(url, options); // similar to superagent but need to converts it to json \n    console.log('my data after fetch :', raw);\n    let data = await raw.json();\n    console.log('my data after converting to json :', data);\n    let count = data.count; \n    let results = data.results;\n    let headers = {}; // if i have headers then i will loop over them i will store them in headers obj as headers1:value\n    raw.headers.forEach((val, key) => headers[key] = val);\n    console.log('raw.headers--------', raw.headers);\n    // save the values of the url data in the state\n    this.handelUpdate(count, results, headers);  \n    // i need after it to stop the loading theme\n    this.toggleLoading();\n    // now my loading is false\n\n  }\n // passed from component form contain array of objects the url and the method\n  handelSavedRequests = (savedRequests)=>{\n    console.log(\"the savedResquest from app.js before :\",savedRequests)\n    this.setState({savedRequests})\n    console.log(\"the savedResquest from app.js after :\",savedRequests)\n\n  }\n  render() {\n    // what to render in my application ? 1.header inside it the routes for the (home / history /help) 2.footer \n    // home page will contains the form and the results\n    return (\n      <BrowserRouter>\n        <Header />\n\n        <Switch>\n          <Route exact path=\"/\">\n            {/* // the home page should render the form and the results  */}\n            <Form loading={this.state.loading} handelUpdate={this.handelUpdate.bind(this)} fetchData={this.fetchData.bind(this)} toggle={this.toggleLoading.bind(this)} handelSavedRequests={this.handelSavedRequests} />\n            <Results loading={this.state.loading} headers={this.state.headers} count={this.state.count} results={this.state.results} />\n          </Route>\n\n          <Route exact path=\"/history\">\n           {/* // the history will contain the method and the url and a button to click on so it will rerender the pre results pre not a new  */}\n           {/* // pass to the histroy componente the request(url,method) to render it  */}\n           {/* get the parametes from history and fire the fetchData function again  */}\n           <History savedRequests={this.state.savedRequests} fetchData={this.fetchData.bind(this)} toggle={this.toggleLoading.bind(this)}/>\n          </Route>\n          <Route exact path=\"/help\">\n            <Help />\n          </Route>\n        </Switch>\n\n        <Footer />\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}