{"version":3,"sources":["components/main/main.js","components/footer/footer.js","components/header/header.js","App.js","serviceWorker.js","index.js"],"names":["method","Main","props","handelInput","e","url","target","value","console","log","setState","handleMethod","handleClick","a","results","state","fetch","raw","json","data","id","type","placeholder","onChange","this","onClick","name","defaultChecked","htmlFor","React","Component","Footer","Header","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iWAEIA,G,MAAS,OAwDEC,E,kDAtDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,YAAc,SAACC,GACX,IAAMC,EAAMD,EAAEE,OAAOC,MACrBC,QAAQC,IAAIL,EAAEE,OAAOC,OACrB,EAAKG,SAAS,CAAEL,SAXD,EAanBM,aAAe,SAACP,GACZJ,EAASI,EAAEE,OAAOC,MAClBC,QAAQC,IAAI,qBAAsBT,EAAQI,EAAEE,OAAOC,QAfpC,EAmBnBK,YAnBmB,uCAmBN,WAAOR,GAAP,mBAAAS,EAAA,6DACHC,EAAU,EAAKC,MAAMV,IAC3B,EAAKK,SAAS,CAAEI,UAASd,WAFhB,SAGOgB,MAAM,EAAKD,MAAMV,KAHxB,cAGLY,EAHK,gBAIQA,EAAIC,OAJZ,OAILC,EAJK,OAKTX,QAAQC,IAAIU,GALH,2CAnBM,sDAEf,EAAKJ,MAAQ,CACTD,QAAS,GACTT,IAAK,GACLL,OAAQ,IALG,E,qDA6Bf,OACI,8BACI,yBAAKoB,GAAG,YACJ,oCACA,2BAAOC,KAAK,OAAOC,YAAY,oCAAoCC,SAAUC,KAAKrB,cAClF,4BAAQsB,QAASD,KAAKZ,aAAtB,QAEJ,0BAAMa,QAASD,KAAKb,aAAcS,GAAG,QACjC,2BAAOC,KAAK,QAAQD,GAAG,MAAMM,KAAK,SAASnB,MAAM,MAAMoB,gBAAc,IACrE,2BAAOC,QAAQ,OAAf,OACA,2BAAOP,KAAK,QAAQD,GAAG,OAAOM,KAAK,SAASnB,MAAM,SAClD,2BAAOqB,QAAQ,QAAf,QACA,2BAAOP,KAAK,QAAQD,GAAG,MAAMM,KAAK,SAASnB,MAAM,QACjD,2BAAOqB,QAAQ,OAAf,OACA,2BAAOP,KAAK,QAAQD,GAAG,SAASM,KAAK,SAASnB,MAAM,WACpD,2BAAOqB,QAAQ,UAAf,WAEJ,yBAAKR,GAAG,UACJ,2BAAII,KAAKT,MAAMf,OAAf,IAAwBwB,KAAKT,MAAMD,e,GAhDpCe,IAAMC,WCEVC,G,MAFA,kBAAM,gDCQNC,G,MARA,WACX,OACE,gCACE,yCCgFOC,E,uKAZX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUL,IAAMC,WC5DJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.6578bf19.chunk.js","sourcesContent":["import React from 'react';\nimport './main.scss'\nvar method = 'get'\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            results: '',\n            url: '',\n            method: ''\n        };\n    }\n    handelInput = (e) => {\n        const url = e.target.value;\n        console.log(e.target.value);\n        this.setState({ url });\n    };\n    handleMethod = (e) => {\n        method = e.target.value;\n        console.log(\"method from select\", method, e.target.value);\n        //  this.setState({ method });\n\n    }\n    handleClick =async (e)  => {\n        const results = this.state.url;\n        this.setState({ results, method });\n        let raw = await fetch(this.state.url);\n        let data = await raw.json();\n        console.log(data)\n    };\n\n\n    render() {\n        return (\n            <main>\n                <div id=\"inputDiv\" >\n                    <p>URL: </p>\n                    <input type=\"text\" placeholder='https://localhost:3000/categories' onChange={this.handelInput} />\n                    <button onClick={this.handleClick}>Go!</button>\n                </div>\n                <form onClick={this.handleMethod} id='form'>\n                    <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" defaultChecked />\n                    <label htmlFor=\"get\">GET</label>\n                    <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\" />\n                    <label htmlFor=\"post\">POST</label>\n                    <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\" />\n                    <label htmlFor=\"put\">PUT</label>\n                    <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\" />\n                    <label htmlFor=\"delete\">DELETE</label>\n                </form>\n                <div id=\"result\">\n                    <p>{this.state.method} {this.state.results}</p>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport './footer.scss';\n\nconst Footer = () => <footer>&copy 2020</footer>\n\nexport default Footer;","import React from 'react';\nimport'./header.scss';\n\nconst Header = () => {\n    return (\n      <header>\n        <h1> RESTy</h1>\n      </header>\n    )\n  };\n\nexport default Header;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Main from './components/main/main';\nimport Footer from './components/footer/footer';\nimport Header from './components/header/header.js';\n\n\n// const Header = () => {\n//   return (\n//     <header>\n//       <h1>RESTy</h1>\n//     </header>\n//   )\n// };\n\n// const Footer = () => <footer>&copy 2020</footer>\n\n// //Main\n// var method = 'get'\n// class Main extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { results: '',url: '',method:'' };\n//   }\n//   handelInput = (e) => {\n//     const url = e.target.value;\n//     console.log(e.target.value);\n//     this.setState({ url });\n//   };\n//   handleMethod = (e) =>{\n//     method = e.target.value;\n//    console.log(\"method from select\",method,e.target.value);\n//   //  this.setState({ method });\n  \n//  }\n//   handleClick = (e) => {\n//     const results = this.state.url;\n//     this.setState({ results ,method});\n//   };\n \n\n//   render() {\n//     return (\n//       <main className=\"main\">\n//         <div>\n//           <p>URL :</p>\n//         <input type=\"text\" onChange={this.handelInput} />\n//         <button onClick={this.handleClick}>Go</button>\n//         </div>\n//         <form onClick={this.handleMethod}>\n//           <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" defaultChecked/>\n//           <label htmlFor=\"get\">Get</label>\n//           <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\"/>\n//           <label htmlFor=\"post\">Post</label>\n//           <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\"/>\n//           <label htmlFor=\"put\">Put</label>\n//           <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\"/>\n//           <label htmlFor=\"delete\">Delete</label>\n//         </form>\n//         <div id=\"result\">\n//         <p>{this.state.method} {this.state.results}</p>\n//         </div>\n//       </main>\n//     );\n//   }\n// }\n\n\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Main />\n        <Footer />\n      </React.Fragment>\n    )\n  }\n}\n\n\n\nexport default App;\n//github","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}